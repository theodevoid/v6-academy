// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Make sure fields other that `userId` are nullable to avoid
// SQL errors when a user registers through Supabase Auth
model Profile {
  userId       String         @id @db.Uuid
  Course       Course[]
  Comment      Comment[]
  WatchHistory WatchHistory[]
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String
  courses Course[]
}

model Course {
  id                 Int            @id @default(autoincrement())
  name               String
  category           Category       @relation(fields: [categoryId], references: [id])
  categoryId         Int
  units              Unit[]
  createdAt          DateTime       @default(now())
  slug               String         @unique
  thumbnailUrl       String?
  author             Profile?       @relation(fields: [userId], references: [userId])
  userId             String?        @db.Uuid
  description        String         @default("")
  mainLearningPoints String[]
  prerequisiteNotes  String         @default("")
  fiatPrice          Int            @default(0)
  pointsPrice        Int            @default(0)
  WatchHistory       WatchHistory[]
}

model Unit {
  id        Int      @id @default(autoincrement())
  title     String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())
  topics    Topic[]
  order     Int      @default(1)
}

model Topic {
  id                      Int            @id @default(autoincrement())
  title                   String
  videoUrl                String?
  description             String?
  writtenMaterialMarkdown String?
  createdAt               DateTime       @default(now())
  type                    TopicType      @default(VIDEO)
  unit                    Unit?          @relation(fields: [unitId], references: [id])
  unitId                  Int?
  order                   Int            @default(1)
  isFree                  Boolean?       @default(false)
  WatchHistory            WatchHistory[]
}

enum TopicType {
  VIDEO
  TEXT
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  user      Profile  @relation(fields: [userId], references: [userId])
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
}

model WatchHistory {
  id            Int      @id @default(autoincrement())
  user          Profile  @relation(fields: [userId], references: [userId])
  topic         Topic    @relation(fields: [topicId], references: [id])
  course        Course   @relation(fields: [courseId], references: [id])
  userId        String   @db.Uuid
  topicId       Int
  courseId      Int
  lastWatchedAt DateTime @default(now())
}
